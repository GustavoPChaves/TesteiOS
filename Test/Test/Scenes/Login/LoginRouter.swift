//
//  LoginRouter.swift
//  Test
//
//  Created by Gustavo Chaves on 29/04/20.
//  Copyright (c) 2020 Gustavo Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol LoginRoutingLogic
{
  func routeToStatements(segue: UIStoryboardSegue?)
}

protocol LoginDataPassing
{
  var dataStore: LoginDataStore? { get }
}

class LoginRouter: NSObject, LoginRoutingLogic, LoginDataPassing
{
  weak var viewController: LoginViewController?
  var dataStore: LoginDataStore?
  
  // MARK: Routing
  
  func routeToStatements(segue: UIStoryboardSegue?)
  {
    if let segue = segue {
      let destinationVC = segue.destination as! StatementsViewController
      var destinationDS = destinationVC.router!.dataStore!
      passDataToStatements(source: dataStore!, destination: &destinationDS)
    } else {
      let storyboard = UIStoryboard(name: "Main", bundle: nil)
      let destinationVC = storyboard.instantiateViewController(withIdentifier: "StatementsViewController") as! StatementsViewController
       
        
            //self.viewController?.present(destinationVC, animated: true, completion: {
                var destinationDS = destinationVC.router!.dataStore!
                self.passDataToStatements(source: self.dataStore!, destination: &destinationDS)
                self.navigateToStatements(source: self.viewController!, destination: destinationVC)



            
        }
        
          
  }

  // MARK: Navigation
  
  func navigateToStatements(source: LoginViewController, destination: StatementsViewController)
  {
    DispatchQueue.main.async {
        destination.modalPresentationStyle = .custom
        source.show(destination, sender: nil)
    }
  }
  
  // MARK: Passing data
  
  func passDataToStatements(source: LoginDataStore, destination: inout StatementsDataStore)
  {
    //destination.name = source.name
     guard let response = source.response else { return }
    destination.userData = User(userId: response.id, name:  response.name, bankAccount: response.account, agency: response.agency, balance: response.balance)
  }
}
