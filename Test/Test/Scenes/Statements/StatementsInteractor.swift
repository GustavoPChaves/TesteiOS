//
//  StatementsInteractor.swift
//  Test
//
//  Created by Gustavo Chaves on 29/04/20.
//  Copyright (c) 2020 Gustavo Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementsBusinessLogic
{
  func doSomething(request: Statements.UserData.Request)
}

protocol StatementsDataStore
{
  //var name: String { get set }
    var userData: User{ get set}
}

class StatementsInteractor: StatementsBusinessLogic, StatementsDataStore
{
    var userData = User()
    
  var presenter: StatementsPresentationLogic?
  var worker: StatementsWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: Statements.UserData.Request)
  {
    //worker = StatementsWorker()
    //worker?.getStatements()
    
    let response = Statements.UserData.Response(userId: userData.userId!, userName: userData.name!, userAccount: userData.bankAccount!, userAgency: userData.agency!, userBalance: userData.balance!)
    presenter?.presentUser(response: response)
  }
    
    func getStatements(){
        worker = StatementsWorker()
        worker?.getStatements()
        
//        let response = Statements.UserStatements.Response(transaction: <#T##String#>, date: <#T##String#>, description: <#T##String#>, value: <#T##String#>)
//        presenter?.presentSomething(response: response)
    }
}
